                                     GRADER

Name of student running submit: Walid
Login of student running submit: wrahman

Second team member's name: N/A
Second team member's login: N/A

Third team member's name (if any): N/A
Third team member's login: N/A

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?


Have you tested your program on the 61B lab machines?


Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor (or is it a variable-depth search)?


Describe your board evaluation function in some detail.


Does your MachinePlayer use any special method of choosing the first few moves?


Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).  (If you're using a list class, that should probably count as
     a separate module.)
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces will be worth 10% of your
grade.

Classes:
    GameBoard extends List

    GameChip extends ListNode (includes attribute saying where on the board the chip is)

    MachinePlayer extends Player

    Move

    Player

    List

    ListNode

Modules used in/by MachinePlayer:
    Determine if a move is valid.
        Implemented in: GameBoard
        Methods:
            /**
            * isValid() determines if a particular move is valid on "this" GameBoard.
            *
            * @param m is a Move object which could come from any player playing the game
            * @param side is the side (0 or 1) representing either the black or white side of the player respectively
            * @return false if move is invalid and violates the 4 rules of a valid move (and prints error message)
            *         true otherwise
            **/
            public boolean isValid(Move m, int side) {}

    Update/return the state of a GameBoard (including generating a list of valid moves based on the currently places
        chips on the board)
        Methods:
            /**
            * listOfValidMoves() Generates and returns a list of all valid moves on "this" GameBoard
            * @return a List of all possible moves allowed by the current state of the GameBoard
            **/
            public List listOfValidMoves() {}

    Finding chips (of the same color) that form connections with a particular chip
        Implemented in: GameBoard
        Methods:
            /**
            * listOfConnectedChips() Generates and returns a list of all chips currently connected with a particular
            * GameChip on "this" GameBoard.
            * @param c is a GameChip object
            * @return a list of all possible GameChip objects connected to this chip
            **/
            public List listOfConnectedChips(GameChip c) {}

    Determine whether a game board contains any networks for a given player (most difficult)
        Implemented in: MachinePlayer
        Methods:
            /**
            * networkFound() tells you whether a valid network has been found on "this" GameBoard for a particular
            * player on side 0 or 1 (black or white).
            * @param side is an integer 0 or 1 that picks which side player you are checking to see whether they have
            *        a valid and completed network.
            * @return either true or false for whether a player has a completed network or not.
            **/
            public boolean networkFound(int side) {}

    Compute an evaluation function for a board (possibly difficult)
        Implemented in: MachinePlayer
        Methods:
            /**
            * This method assigns a score to a particular GameBoard giving the likelihood of winning the game from
            * this point onward.
            * @param g is the GameBoard object we are evaluating with the evaluation function.
            * @return a double that indicates how good the chances are of winning. The more positive the number, the
            *         better the chances are of winning.
            **/
            public double evaluationFunction(GameBoard g) {}

    Perform minimax tree search (difficult)
        Implemented in: MachinePlayer
        Methods:
            /**
            * This algorithm recursively searches through a GameBoard, many moves down the line (specified by
            * MachinePlayer's searchDepth parameter) to return to you the move with the greatest likelihood of winning.
            * @param g is the GameBoard upon which you are implementing the tree search to see which move the computer
            *          should make next in order to increase its odds of winning.
            * @return a Move object that the MachinePlayer will use as its next move.
            **/
            public Move minimaxTreeSearch(GameBoard g) {}































